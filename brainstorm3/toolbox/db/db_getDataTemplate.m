function [ template ] = db_getDataTemplate(structureName)
% DB_GETDATATEMPLATE: Defines a template structure for all the Brainstorm data types.
%
% USAGE :  [template] = db_getDataTemplate(structureName);
%
% INPUT:   String - {'Anatomy', 'Surface', 'Channel', 'Data', 'HeadModel', 'Results', 'Stat', 
%                    'Subject', 'Study', 'ProtocolInfo', 'ProtocolSubjects', 'ProtocolStudies',
%                    'Layout', 'Colormap', 'Measures', 'LoadedResults', 'FigureId', 
%                    'Figure', 'Dataset', 'DisplayHandlesTimeSeries', 'DisplayHandlesTopography', 
%                    'DisplayHandles3DViz', 'Scout', 'GlobalData', 'Landmark', 
%                    'SCS', 'NCS', 'TessInfo', ...}

% @=============================================================================
% This software is part of The Brainstorm Toolbox
% http://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2009 Brainstorm by the University of Southern California
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPL
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm licence" at command prompt.
% =============================================================================@
%
% Authors: Francois Tadel, 2008
% ----------------------------- Script History ---------------------------------
% FT  24-Jun-2008  Creation
% ------------------------------------------------------------------------------

% Define templates that might be used in different ways 
templateAnatomy = struct(...
    'Comment',     '', ...
    'FileName',    '');

templateSurface = struct(...
    'Comment',     '', ...
    'FileName',    '', ...
    'SurfaceType', '');

templateChannel = struct(...
    'FileName',        '', ...
    'Comment',         '', ...
    'nbChannels',      0, ...
    'Modalities',      [], ...
    'DisplayableSensorTypes', []);
templateData = struct(...
    'FileName',       '', ...
    'Comment',        '');
templateImage = struct(...
    'FileName',       '', ...
    'Comment',        '');
templateNoiseCov = struct(...
    'FileName',       '', ...
    'Comment',        '');
templateHeadModel = struct(...
    'FileName',       '', ...
    'HeadModelName',  '', ...
    'HeadModelType',  '', ...
    'MEGMethod',      '', ...
    'EEGMethod',      '', ...
    'GridName',       '');
templateResult = struct(...
    'FileName',       '', ...
    'Comment',        '', ...
    'DataFile',       '', ...
    'isLink',         0);
templateStat = struct(...
    'FileName',       '', ...
    'Comment',        '', ...
    'Type',           '', ...
    'pThreshold',     '', ...
    'DataFile',       ''); % FOR STATS ON RESULTS ONLY

switch lower(structureName)
    % ==== ANATOMY ====
    case 'anatomy'
        template = templateAnatomy;
    % ==== SURFACE ====
    case 'surface'
        template = templateSurface;
        
    % ==== CHANNEL ====
    case 'channel'
        template = templateChannel;
    % ==== DATA ====
    case 'data'
        template = templateData;
    % ==== HEADMODEL ====
    case 'headmodel'
        template = templateHeadModel;
    % ==== RESULTS ====
    case 'results'
        template = templateResult;
    % ==== STAT ====
    case 'stat'
        template = templateStat;
    % ==== IMAGE ====
    case 'image'
        template = templateImage;
    % ==== NOISECOV ====
    case 'noisecov'
        template = templateNoiseCov;
    % ==== FILES ====
    case 'datamat'
        template = struct('F',           [], ...
                          'Comment',     '', ...
                          'ChannelFlag', [], ...
                          'Time',        [], ...
                          'Device',      '');
    case 'channelmat'
        template = struct(...
            'Comment',    'FIF channels', ...
            'MegRefCoef', [], ...   % CTF compensators matrix, [nMeg x nMegRef]
            'Projector',  [], ...   % SSP matrix, [nChannels x nChannels]
            'TransfMeg',  [], ...   % MEG sensors: Successive transforms from device coord. system to brainstorm SCS
            'TransfEeg',  [], ...   % EEG sensors: Successive transforms from device coord. system to brainstorm SCS
            'HeadPoints', struct(...% Digitized head points 
                'Loc',    [], ...
                'Label',  [], ...
                'Type',   []), ...
            'Channel',    []);      % [nChannels] Structure array, one structure per sensor
    % ==== SUBJECT ====
    case 'subject'
        template = struct(...
              'Name',                'Unnamed', ...
              'Comments',            '', ...
              'FileName',            '', ...
              'DateOfAcquisition',   '', ...
              'Anatomy',             repmat(templateAnatomy,0), ...
              'Surface',             repmat(templateSurface,0), ...
              'iAnatomy',            [], ...
              'iScalp',              [], ...
              'iCortex',             [], ...
              'iInnerSkull',         [], ...
              'iOuterSkull',         [], ...
              'iOther',              [], ...
              'UseDefaultAnat',      0 , ... 
              'UseDefaultChannel',   1);
  
    % ==== STUDY ====
    case 'study'
         template = struct(...
              'Name',                'Unnamed', ...
              'FileName',            '', ...
              'DateOfStudy',         '', ...
              'BrainStormSubject',   '', ...
              'Condition',           '', ...
              'Channel',             repmat(templateChannel,0), ...
              'iChannel',            [], ...
              'Data',                repmat(templateData,0), ...
              'HeadModel',           repmat(templateHeadModel,0), ...
              'iHeadModel',          [], ...
              'Result',              repmat(templateResult,0), ...
              'Stat',                repmat(templateStat,  0), ...
              'Image',               repmat(templateImage,  0), ...
             'NoiseCov',            repmat(templateNoiseCov,  0)); 
          
    % ==== PROTOCOLINFO ====
    case 'protocolinfo'
        template = struct(...
              'Comment',               'default_protocol', ...
              'STUDIES',               '', ...
              'SUBJECTS',              '', ...
              'iStudy',                [], ...
              'UseDefaultAnat',        0, ...
              'UseDefaultChannel',     1);     

    case 'protocolsubjects' 
        template = struct(...
            'Subject',        repmat(db_getDataTemplate('Subject'), 0), ...
            'DefaultSubject', []);
        
    case 'protocolstudies'
        template = struct(...
            'Study',         repmat(db_getDataTemplate('Study'), 0), ...
            'DefaultStudy',  db_getDataTemplate('Study'), ...
            'AnalysisStudy', db_getDataTemplate('Study'));
        
    % ==== LAYOUT ====
    case 'layout'
        template = struct(...
            'MainWindowPos',             [0 0 0 0], ...
            'MainWindowSplitHorizontal', 0, ...
            'MainWindowExplorationMode', 'Subjects', ...
            'ScreensDef',                [], ...  
            'NoGUI',                     0);     
    
    % ==== FILE IMPORT ====
    case 'sfile'
        template = struct(...
            'filename',   '', ...  % Full path to the file
            'format',     '', ...  % {fif,ctf,egi,neuroscan,brainamp,lena,cartool,...}
            'device',     '', ...  % {neuromag,ctf,egi,neuroscan,brainamp,...}
            'comment',    '', ...
            'fid',        [], ...  % Matlab file identifier
            'prop', struct(...            % Properties of the recordings
                'times',        [], ...   % [tStart, tStop]
                'samples',      [], ...   % [iStart, iStop]
                'sfreq',        0, ...    % Sampling frequency
                'rejected_segments', [], ...   % [nBadSeg,2], list of bad segments, defined in number of samples
                'currCtfComp',       [], ...    % {0,1,3} Current CTF compensation order already applied to the recordings
                'destCtfComp',       [], ...    % {0,1,3} Destination CTF compensation order
                'inactiveProjector', []), ...  % SSP projectors that need to be applied to the recordings
            'epochs', repmat(struct(...
                'label',   '', ...        
                'samples', [], ...        % [iStart, iStop]
                'times',   [], ...        % [tStart, tStop]
                'nave',    0, ...         % Number of epochs averaged to produce this block
                'select',  1), 0), ...
            'events',      repmat(struct(...
                'label',      '', ...
                'epochs',     [], ...      % [list of epochs indices]
                'samples',    [], ...      % [list of time indices]
                'times',      [], ...      % [list of time values]
                'reactTimes', [], ...      % [list of reaction times, when applicable]
                'select',     1), 0), ...
            'header',      [], ...
            'channelmat',  [], ...
            'channelflag', []);
        
    case 'importoptions'
        template = struct(...
            'UseEvents',        0, ...                 % {0,1}: If 1, perform epoching around the selected events
            'EventsTimeRange',  [-0.1000 0.3000], ...  % Time range for epoching, zero is the event onset (if epoching is enabled)
            'GetAllEpochs',     0, ...                 % {0,1}: Import all arrays, no matter how many they are
            'iEpochs',          1, ...                 % Array of indices of epochs to import (if GetAllEpochs is not enabled)
            'SplitRaw',         0, ...                 % {0,1}: If 1, and if importing continuous recordings (no epoching, no events): split recordings in small time blocks
            'SplitLength',      2, ...                 % Duration of each split time block, in seconds
            'Resample',         0, ...                 % Enable resampling (requires Signal Processing Toolbox)
            'ResampleFreq',     0, ...                 % Resampling frequency (if resampling is enabled)
            'UseCtfComp',       1, ...                 % Get and apply CTF 3rd gradient correction if available 
            'UseSsp',           1, ...                 % Get and apply SSP (Signal Space Projection) vectors if available
            'RemoveBaseline',   'no', ...              % Method used to remove baseline of each channel: {no, all, time, sample}
            'BaselineRange',    [], ...                % [tStart,tStop] If RemoveBaseline is 'time';  [sampleStart,sampleStop] If RemoveBaseline is 'sample'; Else ignored
            'ImportMode',       'Epoch', ...           % Import mode:  {Epoch, Time, Event}
            'events',           [], ...                % Events structure: (label, epochs, samples, times, reactTimes, select)
            'AutoAnswer',       0, ...                 % Answer automatically to all the questions that can be asked to the user (USE CAREFULLY)
            'CreateConditions', 0);                    % {0,1} If 1, create new conditions in Brainstorm database if it is more convenient
        
    % ==== COLORMAPS ====
    case 'colormap'
        template = struct(...
            'Name',             '', ...
            'CMap',             [], ...
            'isAbsoluteValues', 0, ...
            'isNormalized',     0, ...
            'DisplayColorbar',  0, ...
            'MaxValue',         [], ...
            'MaxValueType',     '', ...
            'Contrast',         0, ...
            'Brightness',        0);
          
    % ==== GLOBAL DATA ====
    case 'measures'
        template = struct(...
            'Time',            [], ...
            'NumberOfSamples', [], ...
            'ChannelFlag',     [], ...
            'F',               [], ...
            'isStatic',        0);

    case 'loadedresults'
        template = struct(...
            'FileName',         '', ...
            'Comment',          '', ...
            'Time',             [], ...
            'SamplingRate',     [], ...
            'NumberOfSamples',  [], ...
            'ChannelFlag',      [], ...
            'ImageGridAmp',     [], ...
            'ImagingKernel',    [], ...
            'nbVertices',       [], ...
            'SurfaceFile',      '', ...
            'Fsynth',           [], ...
            'GoodChannel',      [], ...
            'isStatic',         0); %, ...
            %'Residuals',        []);
            
    case 'loadedsurface'
        template = struct(...
            'FileName',        '', ...
            'Name',            '', ...
            'Comment',         '', ...
            'Vertices',        [], ...
            'Faces',           [], ...
            'VertConn',        [], ...
            'VertNormals',     [], ...
            'Curvature',       [], ...
            'tess2mri_interp', []);  % Interpolation matrix (Surface -> MRI)
     
    case 'loadedmri'
        template = struct(...
            'FileName',   '', ...
            'Comment',    '', ...
            'Cube',       [], ...
            'Voxsize',    [], ...
            'SCS',        [], ...
            'NCS',        [], ...
            'Histogram',  [], ...
            'InitTransf', []);  


    case 'figureid'
        template = struct(...
            'Type',           '', ...
            'SubType',        '', ...
            'Modality',       '');
    
    case 'figure'
        template = struct(...
            'Id',                    db_getDataTemplate('FigureId'), ...   
            'hFigure',               0, ...
            'Handles',               struct(), ...
            'SelectedChannels',      []);
            
    case 'channeldesc'
        template = struct(...
                'Name',        '', ...
                'Comment',     '', ...
                'Type',        '', ...
                'Loc',         [], ...
                'Orient',      [], ...
                'Weight',      []);
                   
    case 'dataset'
        template = struct(...
            'DataFile',    '', ...
            'StudyFile',   '', ...
            'SubjectFile', '', ...
            'ChannelFile', '', ...
            'Surfaces',    repmat(db_getDataTemplate('LoadedSurface'), 0), ...
            'Measures',    db_getDataTemplate('Measures'), ...
            'Results',     repmat(db_getDataTemplate('LoadedResults'), 0), ...
            'Channel',     repmat(db_getDataTemplate('ChannelDesc'), 0), ...
            'HeadPoints',  [], ...
            'MouseSelectedChannels', [], ...
            'Figure',      repmat(db_getDataTemplate('Figure'), 0), ...
            'isStat',      0, ...
            'isZscore',    0);

    case 'displayhandlestimeseries'
        template = struct(...
            'hTimeCursor',   [], ...
            'hTextCursor',   [], ... 
            'hTimeZeroLine', [], ...
            'hLines',        [], ...
            'LinesColor',    [], ...
            'DataMinMax',    [], ...
            'DisplayFactor', [], ...
            'DisplayMode',   []);
    case 'displayhandlestopography'
        template = struct(...
            'hSurf',          [], ...
            'Wmat',           [], ... 
            'DisplayMegGrad', '', ...   % {'first','second','norm'}
            'DataMinMax',     [], ...
            'hSensorMarkers', [], ...
            'hSensorLabels',  [], ...
            'hSensorOrient',  [], ...
            'hContours',      [], ...
            'MarkersLocs',    []);
            
    case 'displayhandles3dviz'
        template = struct(...
            'hSensorMarkers', [], ...
            'hSensorLabels',  [], ...
            'hSensorOrient',  []);
           
    case 'scout'
        template = struct(...
            'SurfaceFile', '', ... % File on which the scout is defined
            'Vertices',    [], ... % Index of closest vertices to current scout
            'Seed',        [], ... % Original vertex of the scout area
            'Area',        [], ... % Scout area, in cm
            'Handles',     repmat(struct( ...
                'hFig',        [], ... % Figure handle in which the scout is displayed
                'hScout',      [], ... % Handles to the graphical scout objects
                'hLabel',      [], ... 
                'hVertices',   [], ...
                'hPatch',      []), 0), ...
            'Color',       [0 1 0], ...
            'Label',       '');
        
    case 'cluster'
        template = struct(...
            'Sensors', '', ... % File on which the scout is defined
            'Label',   '');
        
    case 'globaldata'
        template = struct(...
            'DataSet', repmat(db_getDataTemplate('DataSet'), 0), ...
            'Mri',     repmat(db_getDataTemplate('LoadedMri'), 0), ...
            'Surface', repmat(db_getDataTemplate('LoadedSurface'), 0), ...
            'MaxTimeWindow', struct(...
                'Time',            [], ...
                'SamplingRate',    [], ...
                'NumberOfSamples', 0), ...
            'UserTimeWindow', struct(...
                'Time',            [], ...
                'SamplingRate',    [], ...
                'NumberOfSamples', 0, ...
                'CurrentTime',     []), ...
            'ChannelEditor',  struct(...
                'ChannelFile',    '', ...
                'ChannelMat',     [], ...
                'DataFile',       [], ...
                'isPathAbsolute', 0, ...
                'LocColumns',     [], ...
                'OrientColumns',  [], ...
                'isModified',     0), ...
            'HeadModeler',    struct(...
                'sSubject',       [], ...
                'iStudies',       [], ...
                'Channel',        [], ...
                'isEEG',          0, ...
                'isMEG',          0, ...
                'HeadPoints',     [], ...    
                'nbSpheres',      0, ...
                'BFS',            [], ...
                'GUI',            struct(...
                    'hFig',                     [], ...
                    'Figure3DButtonDown_Bak',   [], ...
                    'Figure3DButtonMotion_Bak', [], ...
                    'Figure3DButtonUp_Bak',     [], ...
                    'Figure3DCloseRequest_Bak', [], ...
                    'selectedButton',           [], ...
                    'mouseClicked',             [], ...
                    'isClosing',                [], ...
                    'hButtonTransX',            [], ...
                    'hButtonTransY',            [], ...
                    'hButtonTransZ',            [], ...
                    'hButtonResize',            [])), ...
            'InverseSolutions', struct(...
                'iStudyList',      [], ...
                'iDataList',       [], ...
                'isSurfHeadmodel', 1, ...
                'AvailableModalities', [], ...
                'Time',            [], ...
                'SamplingRate',    [], ...
                'TimeSegment',     [], ...
                'BaselineSegment', [], ...
                'Modalities',      {}), ...
             'Stat', struct(...
                 'TimeWindowAA',     [], ...
                 'TimeWindowAB',     [], ...
                 'TimeWindowUnique', [], ...
                 'SampleFilesA',     [], ...
                 'SampleFilesAA',    [], ...
                 'SampleFilesAB',    [], ...
                 'FilterFileTag',    ''), ...
             'Scouts', repmat(db_getDataTemplate('Scout'), 0), ...
             'Clusters', repmat(db_getDataTemplate('Cluster'), 0), ...
             'CurrentFigure',        struct(...
                 'Type3D',  [], ...
                 'Type2D',  [], ...
                 'Last',    []), ...
             'CurrentScoutsSurface', '', ...
             'VisualizationFilters', struct(...
                 'LowPassEnabled',       0, ...
                 'LowPassValue',         40, ...
                 'HighPassEnabled',      0, ...
                 'HighPassValue',        1), ...
             'MIP',      struct(...
                 'isMipAnatomy', 0, ...
                 'isMipFunctional', 0), ...
             'Colormaps',            [], ...
             'ChannelSelections',    struct(...
                 'CurrentSelection', [], ...
                 'Selections',       [], ...
                 'DefaultFactor',    1));

        
    case 'landmark'
        template = struct(...
            'Name',   '', ...
            'mriLoc', '');
    case 'scs'
        template = struct(...
            'NAS',    [], ...
            'LPA',    [], ...
            'RPA',    [], ...
            'R',      [], ...
            'T',      []);
    case 'ncs'
        template = struct(...
            'AC',    [], ...
            'PC',    [], ...
            'IH',    []);
        
    % ===== 3DViz appdata structure =====
    case 'tessinfo'
        antomyColor = [.35*[1 1 1]; .6*[1 1 1]];
        %antomyColor = [.7*[0.93 0.82 0.80]; [0.93 0.82 0.80]];
        template = struct(...
            'SurfaceFile',                '', ...
            'Name',                    '', ...
            'DataSource',              struct(...
                'Type',                '', ...   % {'data', 'results', 'stats', ...}
                'FileName',            '', ...
                'isStat',              0, ...
                'isZscore',            0), ...
            'hPatch',                  [], ...
            'nVertices',               0, ...
            'nFaces',                  0, ...
            'SurfAlpha',               0, ...    % Surface transparency
            'SurfShowCurvature',       0, ...    % Toggle show/hide surface curvature viewing   
            'SurfCurvatureThreshold',  0, ...    % Threshold to apply to color coding of curvature values
            'SurfShowEdges',           0, ...    % Toggle oon/off surface edges display
            'AnatomyColor',            antomyColor, ... % RGB color for curvature encoding
            'SurfSmoothValue',         0, ...
            'Data',                    [], ...   % MEG, EEG or current density for overlay to anatomy (needs to be compatible in size with FaceVertexCdata patch property)
            'DataMinMax',              [], ...   % Minimum and maximum of the DataSource.FileName file
            'DataWmat',                [], ...   % Interpolation matrix (transformation to map Data on hPatch surface) 
            'OverlayCube',             [], ...   % Interpolated results in a MRI volume
            'DataAlpha',               0, ...    % Alpha for blending of anatomy and surface data
            'DataIntThreshold',           0.5, ...  % Threshold to apply to color coding of data values  
            'DataExtThreshold',           0, ...  % Hide activation cluster smaller than ...
            'DataLimitValue',          [], ...   % Relative limits for colormapping
            'CutsPosition',            [0 0 0], ...   % Position of the three orthogonal MRI slices
            'Resect',                  'none', ...    % Either [x,y,z] resect values, or {'left', 'right', 'none'}
            'MipAnatomy',              [], ...        % 3 cells: Maximum intensity power in each direction (MRI amplitudes)
            'MipFunctional',           [] ...         % 3 cellsMaximum intensity power in each direction (sources amplitudes)
            );      
        template.MipAnatomy = cell(3,1);
        template.MipFunctional = cell(3,1);
    otherwise
        error('Unknown data template : %s', structureName);
end
  
  


